/// @file deck.hpp
#ifndef DECK_H
#define DECK_H

#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gtk/gtk.h>
#include <vector>
#include <string>
#include <ostream>
#include <fstream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <cassert>
#include <cinttypes>
#include <cstdlib>
#include <cstdio>
#include <stdlib.h>
#include <filesystem>
#include <ranges>
#include <algorithm>
#include <version>
#include <error.h>
#include <jpeglib.h>
#include <jerror.h>
#include <string>
#include <stack>

#include "decklib.hpp"
#include "mintdeck.hpp"

///
/// @brief Namespace @namespace decklibrary controls a Stream Deck device.
///
namespace decklibrary
{

  class deck;
  class context;

#define STATECOUNT 4

  ///
  /// @brief Application buisness logic.
  ///
  struct buttoninfo
  {
    std::vector<unsigned char> image;  ///< jpeg image.
    std::vector<unsigned char> pixmap; ///< pixmap image.
    int width;                         ///< Pixmap width in pixels.
    int height;                        ///< Pixmap height in pixels.
    /// A descriptive string showing sequential pressed keys and SHIFT, CTRL, ALT, and META states for each key.  Modifiers precede keys in a combination of <SHIFT>, <CTRL>, <ALT>, and <META> tags.  Sequential keys using the same modifiers as the preceding key join to the previous modifier group by using a '+' character.  The first pressed key following modifier tags does not use a + since strings of modifier groups must always be followed by at least one key.
    std::string kstrokes;
    /// Sequential groups of keys that are pressed together.  'kaction' groups are produced from the descriptive string 'kstrokes' when 'kstrokes' is set.  Having to convert a 'kstrokes' string each time a key is pressed is not desired.
    std::vector<std::vector<keymap>> kaction;
  };

  class keyfiles
  {
  public:
    /// @brief Sets index of the default keyset.
    /// If a keyset is named default it will be the default.  Otherwise the first keyset in the list will be used as the default keyset.
    keyfiles();
    /// @brief A buttonset sets image and keystring for each button.
    /// @param decksize
    /// @return Buttoninfo for a button.
    static buttoninfo *loadkeys(int decksize, int setindex);
    /// @brief Makes a list of keysets and identifies the default.  If a default does not exist one is made.
    static void findbuttonsets();
    /// @brief Provides keyset filenames.
    static std::vector<std::string> getbuttonsets();
    /// @brief Loads a buttonset file.
    static void loadbuttonset(gpointer menudata);
    /// @brief Returns the index of the default keyset.
    /// @return The default index.
    static int getfileindex();
    /// @brief Writes the active keyset back to the file from which it was loaded.
    static void savebuttonset();
    /// @brief Renames the loaded keyset.
    /// @param keysetname The widget holding the keyset name.
    static void savebuttonsetas(GtkWidget *widget, GtkWidget *keysetname);
    /// @brief Deletes a keyset.
    /// @param keysetname The keyset to be deleted.
    static void deletebuttonset(GtkWidget *widget, GtkWidget *keysetname);
    /// @brief Generates key groups from a button keystring.
    /// @param button The button being loaded with key groups.
    static void loadkeygroups(buttoninfo *btn);

  private:
    /// @brief The default file index in the list of keysets.
    static int defaultindex;
    /// @brief  The keyset name list.
    static std::vector<std::string> keysetnames;
    /// @brief Button info to define a button.
    static buttoninfo *keybuttons;
    /// @brief Directory path to keyset files.
    static const char *keysetpath;
    /// @brief The loaded buttonset.
    static std::string loadedbuttonset;
    /// @brief Saves a RGB pixmap in a buttoninfo.
    /// @param jpegData A pointer the JPEG source image.
    /// @param jpegSize The byte size of the JPEG image.
    /// @param button The modified buttoninfo.
    static void loadpixmap(unsigned char *jpegData, unsigned long int jpegSize, buttoninfo *button);
    /// @brief The dialog callback deletes the dialog.
    /// @param widget The dialog button.
    static void deletedialog(GtkWidget *widget);
  };

  class deck
  {
    /// Button data.  Each Stream Deck button has an image with descriptions of keystrokes generated by pressing the Stream Deck button.
  public:
    deck();
    /// @brief Loads button images and keystrings.
    /// @param widget
    void init(GtkWidget *widget);
    /// @brief Identifies button numbers from a binary vector sent on a Stream Deck button press.
    /// @param btns A boolean vector of key states.
    void buttonpress(std::vector<bool> &btns);
    /// @brief Returns a key image as a GtkWidget.
    /// @param key The key number.
    /// @return GtkWidget*
    GtkWidget *getkeyimage(int key);
    /// @brief Sets the serial number and firmware version for display.
    /// @param serialnumber
    /// @param firmware
    static std::pair<std::string, std::string> deckInfo();
    /// @brief Resets the Stream Deck.
    static void deckreset();
    /// @brief Sets the backlight brightness.
    /// @param widget
    static void deckbrightness(GtkRange *range);
    /// @brief The screen tile click callback.
    /// @param widget A menu selection.
    static void mousebtnclick(GtkWidget *widget, gpointer udat);
    /// @brief Pushes button info onto a stack.
    /// @param btn
    static void pushbutton(int btn);
    /// @brief Pops button info from the stack if it is not empty.
    /// @param btn
    static void popbutton(int btn);
    /// @brief Set the Mode used to handle a click on the MintDeck window.
    /// @param widget
    /// @param data Not used.
    static void setmode(gpointer data);
    /// @brief The key press callback.  Modifier keys change state.
    /// @param widget The dialog window.
    /// @param event Describes the key event.
    /// @param btn The number of the button tile that was clicked.
    /// @return gboolean
    static gboolean onKeyPress(GtkWidget *widget, GdkEventKey *event, int btn);
    /// @brief The key release callback.  Keystrokes are encoded.
    /// @param keyval A key pressed or released.
    /// @param pressed The state of being pressed or released.
    static gboolean onKeyRelease(GtkWidget *widget, GdkEventKey *event);
    /// @brief The keystring is parsed to identify keys.
    /// @param keyString A collected sequence of keypresses.
    /// @return std::vector<std::string> Each string represents a key.
    static std::vector<keymap> parsestring(const std::string &keystring);
    /// @brief Extracts groups of keys pressed together from a keypress recording.
    /// @param elements Sequential keys in a keypress string.
    /// @return std::vector<std::vector<std::string>> Sequential groups of keys pressed together.
    static std::vector<std::vector<keymap>> groupCollector(const std::vector<keymap> &elements);
    /// @brief Closing the key input dialog saves a button keystring and generates keypress groups.
    /// @param widget The dialog window.
    static void savekeystring(GtkWidget *widget);
    /// @brief Closing the edit dialog saves a new keystring and generates new keypress groups.
    /// @param widget
    /// @param userdata
    static void setkeystring(GtkWidget *widget, GdkEvent *, gpointer userdata);
    /// @brief Returns control to the calling function by throwing a new error.
    /// @param cinfo Error info.
    static void catchjpegerror(j_common_ptr cinfo);
    /// @brief create a jpg from the pixmap and save it in the btn buttoninfo and the Stream Deck button.  Saves the pixmap to the buttoninfo.  Redraws tiles.
    /// @param pixbuf The image pixmap.
    /// @param btn The current button.
    static void setnewimage(GdkPixbuf *pixbuf, int btn);
    /// @brief Writes an image to a Stream Deck button.
    /// @param button The button receiving the image.
    /// @param buttonimage The image.
    static void writebuttonimage(int button, std::vector<unsigned char> buttonimage);
    /// @brief The number of Stream Deck buttons.
    /// @return Number of buttons.
    static int getbtncount();
    /// @brief Gets the loaded buttonset.
    /// @return Current button data.
    static buttoninfo *getbuttons();
    /// @brief Sets the buttonset.
    /// @param buttondata
    static void setbuttons(buttoninfo *buttondata);
    /// @brief Returns a button keystring.
    /// @param btn
    /// @return A button keystring.
    static std::string getbuttonkeys(int btn);
    /// @brief Loads new images on all buttons.
    /// @param dicedimage A vector of button images.
    static void loadbbackgroundimage(std::vector<GdkPixbuf *> dicedimages);
    /// @brief Sets the X11 keypress method.
    static void setx11mode();
    /// @brief Sets the EVEMU keypress method.
    static void setevemumode();
    /// @brief Sets the EVMU device number.
    static void setevemudevice(int devnumber);
  private:
    /// @brief The array of connected HIDs.
    static context ctx;
    /// @brief Index to the active HID.
    static int deckindex;
    /// @brief The Stream Deck Serial Number.
    static std::string serialnumber;
    /// @brief The Stream Deck firmware version.
    static std::string firmware;
    /// @brief Sets the mode of button clicks.  Mouseclick tile click options.
    /// Modes are: Record a keystring, Edit a keystring, Load key image, Push key, Pop key, Demo.
    static std::string mode;
    /// @brief The technology that is used to generate key presses.
    static keytech keymode;
    /// @brief A evemu device number matching a keyboard.
    static int evemudevnumber;
    /// @brief The key state.
    static std::bitset<STATECOUNT> keystate;
    /// @brief The previous key state.
    static std::bitset<STATECOUNT> priorkeystate;
    /// @brief A keystroke recording.
    static std::string keystring;
    /// @brief Number of button pressed.
    static int btnpressed;
    /// @brief Image and data for keys.
    static keyfiles keyset;
    /// @brief  Button data.
    static buttoninfo *buttons;
    /// @brief A stack of selected buttons.
    static std::stack<buttoninfo> buttonstack;
    /// @brief  Button key groups are proccessed.
    /// @param btn The number of a pressed button.
    static void deckbutton(std::vector<int> &btn);
    /// @brief Button key groups are proccessed.
    /// @param btn The number of a pressed button.
    static void deckbutton(int btn);
    /// @brief Loads key image and keystring.
    static void loadkeymap();
    /// @brief Key as a print code one character long.
    /// @param key The current key.
    /// @return true
    /// @return false
    static bool isSimpleKey(keymap key);
    /// @brief Key requires shift.
    /// @param key The current key.
    /// @return true Key is isShifted.
    /// @return false Key is not isShifted.
    static bool isShifted(keymap key);
    /// @brief Finds ALT CTRL and SHIFT keys.
    /// @param key The current key.
    /// @return true Key is a modifier.
    /// @return false Key is not a modifier.
    static bool isModifyKey(keymap key);
    /// @brief Key is an META key.
    /// @param key
    /// @return true Key is META
    /// @return false Key is not META
    static bool isMETAkey(keymap key);
    /// @brief Key is an ALT key.
    /// @param key
    /// @return true Key is ALT
    /// @return false Key is not ALT
    static bool isALTkey(keymap key);
    /// @brief Key is an CTRL key.
    /// @param key
    /// @return true Key is CTRL
    /// @return false Key is not CTRL
    static bool isCTRLkey(keymap key);
    /// @brief Key is an SHIFT key.
    /// @param key
    /// @return true Key is SHIFT
    /// @return false Key is not SHIFT
    static bool isSHIFTkey(keymap key);
    /// @brief Key has an upper and lower case.
    /// @param key The current key.
    /// @return true Key is uppercase.
    /// @return false Key is lowercase.
    static bool isCaseKey(keymap key);
    /// @brief Detects plus key.
    /// Key '+' adds the next key to the current group.
    /// @param key  The current key.
    /// @return true
    /// @return false
    static bool isPlusKey(keymap key);
    /// @brief Detects backslash key.
    /// Used to find escaped characters.
    /// @param key The current key.
    /// @return true Is a backslash key.
    /// @return false Is not a backslash key.
    static bool isBackslashKey(keymap key);
    /// @brief Spoofs Keyboard on Stream Deck button press.
    ///
    /// EVEmu commands generate keystrokes to ensure Linux Wayland compatability.  \link: https://fedoramagazine.org/simulate-device-input-evemu/
    /// Modifier keys SHIFT, CTRL, ALT, META are pressed down.  Other keys are then pressed and released. Modifier keys are released when all other keys are pressed and released.
    /// An example EVEmu command sent using system().
    /// system("evemu-event /dev/input/event30 --type EV_KEY --code KEY_LEFTCTRL --value 1 --sync");
    /// @param groupkeys A vector of keys pressed together.
    static void runScript(std::vector<keymap> groupkeys);
    /// @brief Saves groups from a keystring.
    /// @param groups Groups of keys pressed together.
    /// @param state States of the modifier keys.
    /// @param groupkeys Keys in the group.
    static void savekeygroup(std::vector<std::vector<keymap>> &groups, std::bitset<STATECOUNT> state, std::vector<keymap> &groupkeys);
  };

}

#endif
